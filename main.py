import os
import random
import string
from config import *

# ====== CONFIG ======

def clearsrc():
    """Xo√° m√†n h√¨nh console (t∆∞∆°ng th√≠ch Windows/Linux)."""
    os.system("cls" if os.name == "nt" else "clear")


class QuizGame:
    def __init__(self, qdir=QUESTIONS_DIR):
        """Kh·ªüi t·∫°o game, t·∫°o th∆∞ m·ª•c ch·ª©a c√¢u h·ªèi n·∫øu ch∆∞a c√≥."""
        self.qdir = qdir
        os.makedirs(self.qdir, exist_ok=True)

    # ========== UTILS ==========
    def _files(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ file .txt trong th∆∞ m·ª•c c√¢u h·ªèi."""
        return [f for f in os.listdir(self.qdir) if f.endswith(".txt")]

    def _list_files(self, show=True):
        """Li·ªát k√™ danh s√°ch file + s·ªë l∆∞·ª£ng c√¢u h·ªèi trong m·ªói file."""
        files = self._files()
        if not files:
            print("‚ö†Ô∏è Kh√¥ng c√≥ file c√¢u h·ªèi.")
            return []
        if show:
            print(f"{BRIGHT_GREEN}\nüìÇ Danh s√°ch file:{RESET}")
            for i, f in enumerate(files, 1):
                path = os.path.join(self.qdir, f)
                count = sum(1 for _ in open(path, encoding="utf-8"))
                print(f" {i}) {f} ‚Äì {count} c√¢u h·ªèi")
        return files

    def _choose_file(self, action="ch·ªçn"):
        """Cho ng∆∞·ªùi d√πng ch·ªçn 1 file d·ª±a tr√™n danh s√°ch hi·ªán c√≥."""
        files = self._list_files()
        if not files:
            return None
        idx = input(f"\nüëâ Nh·∫≠p s·ªë file ƒë·ªÉ {action}: ").strip()
        return os.path.join(self.qdir, files[int(idx) - 1]) if idx.isdigit() and 1 <= int(idx) <= len(files) else None

    def _load(self, path):
        """ƒê·ªçc d·ªØ li·ªáu t·ª´ file: m·ªói d√≤ng d·∫°ng 'ID;ƒê√°p √°n;C√¢u h·ªèi;M√¥ t·∫£'."""
        """ƒê·ªçc d·ªØ li·ªáu t·ª´ file: m·ªói d√≤ng d·∫°ng 'ID;ƒê√°p √°n;C√¢u h·ªèi;M√¥ t·∫£'."""
        if not os.path.exists(path):
            return []
        data = []
        with open(path, encoding="utf-8") as f:
            for line in f:
                parts = line.strip().split(";", 3)
                if len(parts) == 3:  # file c≈© kh√¥ng c√≥ desc
                    parts.append("")  # th√™m desc r·ªóng
                data.append(parts)
        return data
        # if not os.path.exists(path):
        #     return []
        # with open(path, encoding="utf-8") as f:
        #     return [line.strip().split(";", 3) for line in f if ";" in line]

    def _save(self, path, data):
        """Ghi l·∫°i d·ªØ li·ªáu v√†o file, s·∫Øp x·∫øp theo ƒë√°p √°n + c√¢u h·ªèi."""
        with open(path, "w", encoding="utf-8") as f:
            for i, (_, a, q, d) in enumerate(sorted(data, key=lambda x: (x[1].lower(), x[2].lower())), 1):
                f.write(f"{i};{a};{q};{d}\n")

    def _show(self, path):
        """Hi·ªÉn th·ªã danh s√°ch c√¢u h·ªèi trong file."""
        data = self._load(path)
        if not data:
            print("‚ùå File tr·ªëng.")
            return []
        print("\nüìã C√¢u h·ªèi:")
        for i, (qid, a, q, d) in enumerate(data, 1):
            print(f"{BRIGHT_CYAN} {i}) {q}{RESET}")
            print(f"   {GREEN}[ƒê√°p √°n: {a}]{RESET}")
            if d:
                print(f"   {YELLOW}üí° M√¥ t·∫£: {d}{RESET}")
        return data

    # ========== QUESTION CRUD ==========
    def _crud(self, mode):
        """Th√™m/Xo√°/S·ª≠a c√¢u h·ªèi trong file."""
        path = self._choose_file(mode)
        if not path:
            return
        data = self._show(path)

        if mode == "th√™m":
            while True:
                q = input(f"\n{GREEN}‚ùì Nh·∫≠p c√¢u h·ªèi (ho·∫∑c g√µ {RED}exit(){GREEN} ƒë·ªÉ quay l·∫°i):{RESET} ").strip()
                if q.lower() == "exit()":
                    break
                a = input("‚úÖ Nh·∫≠p ƒë√°p √°n: ").strip()
                d = input("üí° Nh·∫≠p m√¥ t·∫£ (c√≥ th·ªÉ b·ªè tr·ªëng): ").strip()
                if q and a:
                    data.append((str(len(data) + 1), a, q, d))
                    self._save(path, data)
                    clearsrc()
                    print("‚ûï ƒê√£ th√™m c√¢u h·ªèi m·ªõi.")
                    self._show(path)

        elif mode == "xo√°":
            while True:
                idx = input(f"\n{GREEN}üóëÔ∏è Nh·∫≠p ID c√¢u h·ªèi c·∫ßn xo√° (ho·∫∑c g√µ {RED}exit(){GREEN} ƒë·ªÉ quay l·∫°i):{RESET} ").strip()
                if idx.lower() == "exit()":
                    break
                if idx.isdigit() and 1 <= int(idx) <= len(data):
                    qid, ans, ques, desc = data[int(idx) - 1]
                    confirm = input(f"‚ùì X√°c nh·∫≠n xo√° \"{ques}\" (y/n): ").strip().lower()
                    if confirm == "y":
                        data.pop(int(idx) - 1)
                        self._save(path, data)
                        clearsrc()
                        print(f"üóëÔ∏è ƒê√£ xo√°: \"{ques}\" [ƒê√°p √°n: {ans}]")
                        self._show(path)

        elif mode == "s·ª≠a":
            while True:
                idx = input(f"\n{GREEN}‚úèÔ∏è Nh·∫≠p ID c√¢u h·ªèi c·∫ßn s·ª≠a (ho·∫∑c g√µ {RED}exit(){GREEN} ƒë·ªÉ quay l·∫°i):{RESET} ").strip()
                if idx.lower() == "exit()":
                    break
                if idx.isdigit() and 1 <= int(idx) <= len(data):
                    new_q = input("‚ùì Nh·∫≠p c√¢u h·ªèi m·ªõi: ").strip()
                    new_a = input("‚úÖ Nh·∫≠p ƒë√°p √°n m·ªõi: ").strip()
                    new_d = input("üí° Nh·∫≠p m√¥ t·∫£ m·ªõi (c√≥ th·ªÉ b·ªè tr·ªëng): ").strip()
                    if new_q and new_a:
                        data[int(idx) - 1] = (str(idx), new_a, new_q, new_d)
                        self._save(path, data)
                        clearsrc()
                        print("‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi.")
                        self._show(path)

    # ========== QUIZ ==========
    def _options(self, correct, pool, n):
        """Sinh ra c√°c l·ª±a ch·ªçn tr·∫Øc nghi·ªám, tr√°nh l·∫∑p l·∫°i ƒë√°p √°n ƒë√∫ng."""
        pool = list(set(pool) - {correct, "ƒê√∫ng", "Sai"})
        return random.sample(pool, min(n - 1, len(pool))) + [correct]

    def play_all(self):
        """Ch∆°i quiz v·ªõi t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c, random l·∫´n l·ªôn."""
        files = self._files()
        data = [q for f in files for q in self._load(os.path.join(self.qdir, f))]
        random.shuffle(data)
        self._quiz(data, n_opts=MAX_GENERATE_ALL_ANSWERS, max_qs=MAX_GENERATE_ALL_QUESTIONS)

    def _quiz(self, data, n_opts=None, max_qs=None):
        """Ch·∫°y quiz v·ªõi danh s√°ch c√¢u h·ªèi cho tr∆∞·ªõc."""
        if not data:
            return print("‚ùå Kh√¥ng c√≥ c√¢u h·ªèi.")

        pool = data if max_qs is None else (data * ((max_qs // len(data)) + 1))[:max_qs]
        all_ans = [a for _, a, _, _ in data]
        score, wrong = 0, 0

        for i, (_, a, q, d) in enumerate(pool, 1):
            print("\n" + "="*40)
            print(f"{i}. ‚ùì {q}")
            if d:
                print(f"   {YELLOW}üí° G·ª£i √Ω/M√¥ t·∫£: {d}{RESET}")

            opts = ["ƒê√∫ng", "Sai"] if "nh·∫≠n ƒë·ªãnh ƒë√∫ng sai" in q.lower() else self._options(a, all_ans, n_opts)
            random.shuffle(opts)
            letters = string.ascii_lowercase[:len(opts)]
            mapping = dict(zip(letters, opts))

            for k, v in mapping.items():
                print(f"  {k}) {v}")

            pick = input("üëâ Nh·∫≠p ƒë√°p √°n: ").lower()
            if mapping.get(pick, "").lower() == a.lower():
                score += 1
                print(f"{GREEN}‚úÖ Ch√≠nh x√°c!{RESET}")
            else:
                wrong += 1
                print(f"{RED}‚ùå Sai!{RESET} ƒê√°p √°n ƒë√∫ng: {a}")

        print("\n" + "="*50)
        print("üéØ Ho√†n th√†nh Quiz!")
        print(f"{GREEN}‚úÖ ƒê√∫ng: {score}{RESET}")
        print(f"{RED}‚ùå Sai: {wrong}{RESET}")
        print(f"{BG_RED}üìä K·∫øt qu·∫£: {score}/{len(pool)} ƒë√∫ng{RESET}")
        print(f"{BG_RED}üî• T·ªâ l·ªá ch√≠nh x√°c: {score/len(pool)*100:.1f}%{RESET}")

    def play_file(self):
        """Ch∆°i quiz t·ª´ m·ªôt file c·ª• th·ªÉ."""
        path = self._choose_file("ch∆°i")
        if path:
            self._quiz(self._load(path),
                    n_opts=MAX_GENERATE_NORMAL_ANSWERS,
                    max_qs=MAX_GENERATE_NORMAL_QUESTIONS)

    # ========== MENU ==========
    def manage_questions(self):
        """Menu qu·∫£n l√Ω c√¢u h·ªèi (CRUD)."""
        while True:
            clearsrc()
            print("\n===== üìã QU·∫¢N L√ù C√ÇU H·ªéI =====")
            print(f" {GREEN}1) ‚ûï Th√™m c√¢u h·ªèi{RESET}")
            print(f" {RED}2) üóëÔ∏è Xo√° c√¢u h·ªèi{RESET}")
            print(f" {YELLOW}3) ‚úèÔ∏è S·ª≠a c√¢u h·ªèi{RESET}")
            print(f" {GREEN}Ho·∫∑c nh·∫≠p {RED}exit(){GREEN} üîô quay l·∫°i.{RESET}")
            ch = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn: ").strip()
            if ch == "1": self._crud("th√™m")
            elif ch == "2": self._crud("xo√°")
            elif ch == "3": self._crud("s·ª≠a")
            elif ch.lower() == "exit()":
                break
            else:
                print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, th·ª≠ l·∫°i.")

    def manage_files(self):
        """Menu qu·∫£n l√Ω t·ªáp tin: t·∫°o, xo√°, ƒë·ªïi t√™n file."""
        while True:
            clearsrc()
            path = self._list_files()
            print("\n===== üìÇ QU·∫¢N L√ù T·ªÜP TIN =====")
            print(f" {GREEN}1) ‚ûï T·∫°o file{RESET}")
            print(f" {RED}2) üóëÔ∏è Xo√° file{RESET}")
            print(f" {YELLOW}3) ‚úèÔ∏è ƒê·ªïi t√™n file{RESET}")
            print(f" {GREEN}Ho·∫∑c nh·∫≠p {RED}exit(){GREEN} üîô quay l·∫°i.{RESET}")
            ch = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn: ").strip()
            if ch == "1":
                path = self._list_files()
                print("\n")
                name = input("üìÑ Nh·∫≠p t√™n file m·ªõi: ").strip()
                if name:
                    filepath = os.path.join(self.qdir, f"{name}.txt")
                    if os.path.exists(filepath):
                        print("‚ö†Ô∏è File ƒë√£ t·ªìn t·∫°i.")
                    else:
                        open(filepath, "w", encoding="utf-8").close()
                        print(f"‚úÖ ƒê√£ t·∫°o {name}.txt")
            elif ch == "2":
                path = self._choose_file("xo√°")
                if path:
                    confirm = input(f"‚ùì B·∫°n c√≥ ch·∫Øc mu·ªën xo√° file {os.path.basename(path)} (y/n): ").strip().lower()
                    if confirm == "y":
                        os.remove(path)
                        print(f"üóëÔ∏è File {path} ƒë√£ ƒë∆∞·ª£c xo√°.")
            elif ch == "3":
                path = self._choose_file("ƒë·ªïi t√™n")
                if path:
                    new = input("‚úèÔ∏è Nh·∫≠p t√™n m·ªõi: ").strip()
                    if new:
                        os.rename(path, os.path.join(self.qdir, f"{new}.txt"))
                        print("‚úÖ ƒê√£ ƒë·ªïi t√™n file.")
            elif ch.lower() == "exit()":
                break
            else:
                print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

    def menu(self):
        """Menu ch√≠nh c·ªßa ch∆∞∆°ng tr√¨nh."""
        actions = {
            "1": self.play_file,
            "2": self.play_all,
            "3": self.manage_questions,
            "4": self.manage_files,
            "0": lambda: print("üëã T·∫°m bi·ªát!"),
        }
        while True:
            print(f"{BLUE}\n===== üìö FLASHCARD QUIZ GAME ====={RESET}")
            print(f"{CYAN}1) üéØ Ch∆°i theo b·ªô{RESET}")
            print(f"{CYAN}2) üåç Ch∆°i t·∫•t c·∫£{RESET}")
            print(f"{BRIGHT_YELLOW}3) üìã Qu·∫£n l√Ω c√¢u h·ªèi{RESET}")
            print(f"{BRIGHT_YELLOW}4) üìÇ Qu·∫£n l√Ω t·ªáp tin{RESET}")
            print(f"{BRIGHT_YELLOW}0) üö™ Tho√°t{RESET}")
            ch = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn: ").strip()
            if ch == "0":
                break
            (actions.get(ch) or (lambda: print("‚ö†Ô∏è Sai l·ª±a ch·ªçn.")))()


if __name__ == "__main__":
    QuizGame().menu()
